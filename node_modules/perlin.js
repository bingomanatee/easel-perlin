var PERLIN_CORE = {
    stage:null,
    update:false,
    angle_range:1,
    angle_sample:3,
    opBase:6
}

var _ = require('underscore');
var Canvas = require('canvas');
var util = require('util');
var Stat = require('support/stat');

var easel = require('easel');
var Filter = easel.Filter;
var Bitmap = easel.Bitmap;

function easely(class_name, base, base_name) {
    var bi = base_name + '_initialize';
    var f = function () {
        var args = arguments;
        this.initialize.apply(this, args);
    };
    var p = f.prototype = new base();
    p[bi] = p.initialize;

    p.initialize = function () {
        var args = arguments;
        if (this._pre_initialize) {
            this._pre_initialize.apply(this, args);
        }
        this[bi]();
        if (this._post_initialize) {
            this._post_initialize.apply(this, args);
        }
    }

    return f;
}

var NoiseFilter = easely('NoiseFilter', Filter, 'Filter');

var p = NoiseFilter.prototype;

p.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {
    targetCtx = targetCtx || ctx;
    if (targetX == null) {
        targetX = x;
    }
    if (targetY == null) {
        targetY = y;
    }

    try {
        var imageData = ctx.getImageData(x, y, width, height);
    } catch (e) {
        //if (!this.suppressCrossDomainErrors) throw new Error("unable to access local image data: " + e);
        return false;
    }

    var pixels = imageData.data;
    var c = Math.floor(Math.random() * 255);
    for (var i = 0; i < pixels.length; ++i) {
        if (!((i + 1) % 4)) {
            c = Math.floor(Math.random() * 255);
            pixels[i] = 255;
        } else {
            pixels[i] = c;
        }
    }
    targetCtx.putImageData(imageData, 0, 0);
}

var NormalFilter = easely('NormalFilter', Filter, 'Filter');

var p = NormalFilter.prototype;
p._post_initialize = function (r) {
    this.range = r;
}

p.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {
    targetCtx = targetCtx || ctx;
    if (targetX == null) {
        targetX = x;
    }
    if (targetY == null) {
        targetY = y;
    }

    try {
        var imageData = ctx.getImageData(x, y, width, height);
    } catch (e) {
        //if (!this.suppressCrossDomainErrors) throw new Error("unable to access local image data: " + e);
        return false;
    }

    var pixels = imageData.data;
    var rs = [];
    for (var i = 0; i < pixels.length; i += 4) {
        rs.push(pixels[i]);
    }
    var stat = new Stat(rs);
    var a = stat.avg();
    var sd = stat.std_dev();
    var min = a - sd * this.range / 2;
    var max = a + sd * this.range / 2;
    var range_scale = 255 / (sd * this.range);

    // console.log('min: ', min, 'max: ', max, 'scale: ', range_scale);

    for (var i = 0; i < pixels.length; ++i) {
        if (!((i % 4) == 3)) {
            var c = pixels[i];
            c -= min;
            c *= range_scale;
            c = Math.max(0, Math.min(255, Math.floor(c)));
            pixels[i] = c;
        }
    }
    targetCtx.putImageData(imageData, 0, 0);
}

var Perlin = easely('Perlin', Bitmap, 'Bitmap');
var p = Perlin.prototype;
_.extend(p, {

    _post_initialize:function (w, h) {
        var canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        this.image = canvas;
        var ctx = canvas.getContext("2d");
        new NoiseFilter().applyFilter(ctx, 0, 0, w, h);
    }

});


var PerlinLayer = easely('PerlinLayer', Bitmap, 'Bitmap');
var p = PerlinLayer.prototype;
_.extend(p, {

    _post_initialize:function (h, w, scale, a, b) {
        this.image = document.createElement('canvas');
        this.image.width = w;
        this.image.height = h;

        var stage = new easel.Stage(this.image);
        var pc = 100;
        var sx = pc * scale;
        var sy = pc * scale;

        for (var x = 0; x < w; x += sx)
            for (var y = 0; y < h; y += sy) {

                var p = new Perlin(pc, pc);
                p.scaleX = p.scaleY = scale;

                p.x = x;
                p.y = y;

                stage.addChild(p);

            }
        stage.update();

        var ctx = this.image.getContext('2d');

        if (a) {
            // var bf = new BoxBlurFilter(a, b, 4);
            // bf.applyFilter(ctx, 0, 0, 400, 400);

            var nf = new NormalFilter(3);
            nf.applyFilter(ctx, 0, 0, 400, 400);
        }
    }

});

var PerlinSet = easely('PerlinSet', Bitmap, 'Bitmap');
var p = PerlinSet.prototype;
_.extend(p, {

    _post_initialize:function (h, w, octaves, opBase) {
        this.image = document.createElement('canvas');
        this.image.width = w;
        this.image.height = h;
        this.octaves = octaves;
        this.opBase = opBase ? opBase : 2;
        this.layers = [];

        this.make();

    },

    set_octaves:function (o) {
        this.octaves = Math.max(1, Math.floor(o));
        this.make();
    },

    set_op_base:function (obase) {
        this.opBase = Math.max(0.25, Math.min(3, obase));
        this.make();
    },

    make:function () {

        var stage = new easel.Stage(this.image);
        var inc = 1;
        var xy = 0;
        console.log('ocataves from ', this.octaves, 'to 0');
        for (var octave = this.octaves; octave >= 0; --octave) {
            var op = Math.pow(this.opBase, octave) / Math.pow(this.opBase, this.octaves);

            if (!this.layers[octave]) {
                var scale = Math.pow(2, octave);
                var s = scale * 2;
                console.log('ADDING LAYER: opacity ', op,
                    'scale', scale, 'octaves', octave, 'blur: ', s);
                var p2 = new PerlinLayer(this.image.height, this.image.width, scale, s, s);
                this.layers[octave] = p2

            }

            this.layers[octave].alpha = op;

            inc *= 2;
            stage.addChild(this.layers[octave]);
        }
        stage.update();
    }

});

module.exports.NoiseFilter = NoiseFilter;
module.exports.PerlinSet = PerlinSet;